// Code generated by wunderctl. DO NOT EDIT.

import type function_UsersGet from "../operations/users/get";
import type function_UsersSubscribe from "../operations/users/subscribe";
import type function_UsersUpdate from "../operations/users/update";
import type { ExtractInput, ExtractResponse } from "@wundergraph/sdk/operations";

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export interface GraphQLError {
	message: string;
	path?: ReadonlyArray<string | number>;
}

export interface CreateUserInput {
	username: string;
	email: string;
	provider: string;
	password: string;
	resetPasswordToken: string;
	confirmationToken: string;
	confirmed: boolean;
	blocked: boolean;
	role: string;
	Level: number;
	userRole: string;
	avatar: number;
	company: string;
	contact: number;
	plan: string;
}

export interface LoginInput {
	identifier: string;
	password: string;
}

export type UsersGetInput = ExtractInput<typeof function_UsersGet>;

export type UsersSubscribeInput = ExtractInput<typeof function_UsersSubscribe>;

export type UsersUpdateInput = ExtractInput<typeof function_UsersUpdate>;

export interface InternalCreateUserInput {
	username: string;
	email: string;
	provider: string;
	password: string;
	resetPasswordToken: string;
	confirmationToken: string;
	confirmed: boolean;
	blocked: boolean;
	role: string;
	Level: number;
	userRole: string;
	avatar: number;
	company: string;
	contact: number;
	plan: string;
}

export interface InternalLoginInput {
	identifier: string;
	password: string;
}

export interface InternalUsersGetInput {
	id: string;
}

export interface InternalUsersSubscribeInput {
	id: string;
}

export interface InternalUsersUpdateInput {
	id: string;
	name: string;
	bio: string;
}

export interface InjectedCreateUserInput {
	username: string;
	email: string;
	provider: string;
	password: string;
	resetPasswordToken: string;
	confirmationToken: string;
	confirmed: boolean;
	blocked: boolean;
	role: string;
	Level: number;
	userRole: string;
	avatar: number;
	company: string;
	contact: number;
	plan: string;
}

export interface InjectedLoginInput {
	identifier: string;
	password: string;
}

export interface AlldrugsResponse {
	data?: AlldrugsResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface CreateUserResponse {
	data?: CreateUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface DragonsResponse {
	data?: DragonsResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface LoginResponse {
	data?: LoginResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface NewDrugResponse {
	data?: NewDrugResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UsersGetResponse {
	data?: UsersGetResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UsersSubscribeResponse {
	data?: UsersSubscribeResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UsersUpdateResponse {
	data?: UsersUpdateResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface AlldrugsResponseData {
	backend_drugs?: {
		data: {
			id?: string;
			attributes?: {
				title?: string;
			};
		}[];
	};
}

export interface CreateUserResponseData {
	backend_createUsersPermissionsUser: {
		data?: {
			id?: string;
		};
	};
}

export interface DragonsResponseData {
	spacex_dragons?: {
		name?: string;
		active?: boolean;
	}[];
}

export interface LoginResponseData {
	backend_login: {
		jwt?: string;
		user: {
			id: string;
			username: string;
			email?: string;
		};
	};
}

export interface NewDrugResponseData {
	backend_createDrug?: {
		data?: {
			id?: string;
			attributes?: {
				title?: string;
			};
		};
	};
}

export type UsersGetResponseData = ExtractResponse<typeof function_UsersGet>;

export type UsersSubscribeResponseData = ExtractResponse<typeof function_UsersSubscribe>;

export type UsersUpdateResponseData = ExtractResponse<typeof function_UsersUpdate>;
