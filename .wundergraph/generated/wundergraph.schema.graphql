# Code generated by "wunderctl"; DO NOT EDIT.

""""""
directive @spacex_rateLimit(identityArgs: [String], max: Int, message: String, window: String) on FIELD_DEFINITION

directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

"""
The @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.

A potential use-case could be that you have a graphql upstream which is not accepting null values for variables.
By enabling this directive all variables with null values will be removed from upstream query.

query ($say: String, $name: String) @removeNullVariables {
	hello(say: $say, name: $name)
}

Directive will transform variables json and remove top level null values.
{ "say": null, "name": "world" }

So upstream will receive the following variables:

{ "name": "world" }
"""
directive @removeNullVariables on QUERY | MUTATION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
) on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!) on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

type spacex_Address {
  address: String
  city: String
  state: String
  _join: Query!
}

type spacex_Capsule {
  dragon: spacex_Dragon
  id: ID
  landings: Int
  missions: [spacex_CapsuleMission]
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
  _join: Query!
}

type spacex_CapsuleMission {
  flight: Int
  name: String
  _join: Query!
}

""""""
input spacex_CapsulesFind {
  id: ID
  landings: Int
  mission: String
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
}

type spacex_Core {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: ID
  missions: [spacex_CapsuleMission]
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
  _join: Query!
}

type spacex_CoreMission {
  flight: Int
  name: String
  _join: Query!
}

""""""
input spacex_CoresFind {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: String
  missions: String
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

scalar Date

type spacex_Distance {
  feet: Float
  meters: Float
  _join: Query!
}

type spacex_Dragon {
  active: Boolean
  crew_capacity: Int
  description: String
  diameter: spacex_Distance
  dry_mass_kg: Int
  dry_mass_lb: Int
  first_flight: String
  heat_shield: spacex_DragonHeatShield
  height_w_trunk: spacex_Distance
  id: ID
  launch_payload_mass: spacex_Mass
  launch_payload_vol: spacex_Volume
  name: String
  orbit_duration_yr: Int
  pressurized_capsule: spacex_DragonPressurizedCapsule
  return_payload_mass: spacex_Mass
  return_payload_vol: spacex_Volume
  sidewall_angle_deg: Float
  thrusters: [spacex_DragonThrust]
  trunk: spacex_DragonTrunk
  type: String
  wikipedia: String
  _join: Query!
}

type spacex_DragonHeatShield {
  dev_partner: String
  material: String
  size_meters: Float
  temp_degrees: Int
  _join: Query!
}

type spacex_DragonPressurizedCapsule {
  payload_volume: spacex_Volume
  _join: Query!
}

type spacex_DragonThrust {
  amount: Int
  fuel_1: String
  fuel_2: String
  pods: Int
  thrust: spacex_Force
  type: String
  _join: Query!
}

type spacex_DragonTrunk {
  cargo: spacex_DragonTrunkCargo
  trunk_volume: spacex_Volume
  _join: Query!
}

type spacex_DragonTrunkCargo {
  solar_array: Int
  unpressurized_cargo: Boolean
  _join: Query!
}

type spacex_Force {
  kN: Float
  lbf: Float
  _join: Query!
}

type spacex_HistoriesResult {
  data: [spacex_History]
  result: spacex_Result
  _join: Query!
}

type spacex_History {
  details: String
  event_date_unix: Date
  event_date_utc: Date
  flight: spacex_Launch
  id: ID
  links: spacex_Link
  title: String
  _join: Query!
}

""""""
input spacex_HistoryFind {
  end: Date
  flight_number: Int
  id: ID
  start: Date
}

type spacex_Info {
  ceo: String
  coo: String
  cto: String
  cto_propulsion: String
  employees: Int
  founded: Int
  founder: String
  headquarters: spacex_Address
  launch_sites: Int
  links: spacex_InfoLinks
  name: String
  summary: String
  test_sites: Int
  valuation: Float
  vehicles: Int
  _join: Query!
}

type spacex_InfoLinks {
  elon_twitter: String
  flickr: String
  twitter: String
  website: String
  _join: Query!
}

type spacex_Landpad {
  attempted_landings: String
  details: String
  full_name: String
  id: ID
  landing_type: String
  location: spacex_Location
  status: String
  successful_landings: String
  wikipedia: String
  _join: Query!
}

type spacex_Launch {
  details: String
  id: ID
  is_tentative: Boolean
  launch_date_local: Date
  launch_date_unix: Date
  launch_date_utc: Date
  launch_site: spacex_LaunchSite
  launch_success: Boolean
  launch_year: String
  links: spacex_LaunchLinks
  mission_id: [String]
  mission_name: String
  rocket: spacex_LaunchRocket
  ships: [spacex_Ship]
  static_fire_date_unix: Date
  static_fire_date_utc: Date
  telemetry: spacex_LaunchTelemetry
  tentative_max_precision: String
  upcoming: Boolean
  _join: Query!
}

""""""
input spacex_LaunchFind {
  apoapsis_km: Float
  block: Int
  cap_serial: String
  capsule_reuse: String
  core_flight: Int
  core_reuse: String
  core_serial: String
  customer: String
  eccentricity: Float
  end: Date
  epoch: Date
  fairings_recovered: String
  fairings_recovery_attempt: String
  fairings_reuse: String
  fairings_reused: String
  fairings_ship: String
  gridfins: String
  id: ID
  inclination_deg: Float
  land_success: String
  landing_intent: String
  landing_type: String
  landing_vehicle: String
  launch_date_local: Date
  launch_date_utc: Date
  launch_success: String
  launch_year: String
  legs: String
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  mission_id: String
  mission_name: String
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: String
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: String
  rocket_id: String
  rocket_name: String
  rocket_type: String
  second_stage_block: String
  semi_major_axis_km: Float
  ship: String
  side_core1_reuse: String
  side_core2_reuse: String
  site_id: String
  site_name: String
  site_name_long: String
  start: Date
  tbd: String
  tentative: String
  tentative_max_precision: String
}

type spacex_LaunchLinks {
  article_link: String
  flickr_images: [String]
  mission_patch: String
  mission_patch_small: String
  presskit: String
  reddit_campaign: String
  reddit_launch: String
  reddit_media: String
  reddit_recovery: String
  video_link: String
  wikipedia: String
  _join: Query!
}

type spacex_LaunchRocket {
  fairings: spacex_LaunchRocketFairings
  first_stage: spacex_LaunchRocketFirstStage
  rocket: spacex_Rocket
  rocket_name: String
  rocket_type: String
  second_stage: spacex_LaunchRocketSecondStage
  _join: Query!
}

type spacex_LaunchRocketFairings {
  recovered: Boolean
  recovery_attempt: Boolean
  reused: Boolean
  ship: String
  _join: Query!
}

type spacex_LaunchRocketFirstStage {
  cores: [spacex_LaunchRocketFirstStageCore]
  _join: Query!
}

type spacex_LaunchRocketFirstStageCore {
  block: Int
  core: spacex_Core
  flight: Int
  gridfins: Boolean
  land_success: Boolean
  landing_intent: Boolean
  landing_type: String
  landing_vehicle: String
  legs: Boolean
  reused: Boolean
  _join: Query!
}

type spacex_LaunchRocketSecondStage {
  block: Int
  payloads: [spacex_Payload]
  _join: Query!
}

type spacex_LaunchSite {
  site_id: String
  site_name: String
  site_name_long: String
  _join: Query!
}

type spacex_LaunchTelemetry {
  flight_club: String
  _join: Query!
}

type spacex_LaunchesPastResult {
  data: [spacex_Launch]
  result: spacex_Result
  _join: Query!
}

type spacex_Launchpad {
  attempted_launches: Int
  details: String
  id: ID
  location: spacex_Location
  name: String
  status: String
  successful_launches: Int
  vehicles_launched: [spacex_Rocket]
  wikipedia: String
  _join: Query!
}

type spacex_Link {
  article: String
  reddit: String
  wikipedia: String
  _join: Query!
}

type spacex_Location {
  latitude: Float
  longitude: Float
  name: String
  region: String
  _join: Query!
}

type spacex_Mass {
  kg: Int
  lb: Int
  _join: Query!
}

type spacex_Mission {
  description: String
  id: ID
  manufacturers: [String]
  name: String
  payloads: [spacex_Payload]
  twitter: String
  website: String
  wikipedia: String
  _join: Query!
}

type spacex_MissionResult {
  data: [spacex_Mission]
  result: spacex_Result
  _join: Query!
}

""""""
input spacex_MissionsFind {
  id: ID
  manufacturer: String
  name: String
  payload_id: String
}

scalar spacex_ObjectID

type spacex_Payload {
  customers: [String]
  id: ID
  manufacturer: String
  nationality: String
  norad_id: [Int]
  orbit: String
  orbit_params: spacex_PayloadOrbitParams
  payload_mass_kg: Float
  payload_mass_lbs: Float
  payload_type: String
  reused: Boolean
  _join: Query!
}

type spacex_PayloadOrbitParams {
  apoapsis_km: Float
  arg_of_pericenter: Float
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  mean_anomaly: Float
  mean_motion: Float
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  semi_major_axis_km: Float
  _join: Query!
}

""""""
input spacex_PayloadsFind {
  apoapsis_km: Float
  customer: String
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: ID
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: Boolean
  semi_major_axis_km: Float
}

type Query {
  spacex_capsule(id: ID!): spacex_Capsule
  spacex_capsules(find: spacex_CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Capsule]
  spacex_capsulesPast(find: spacex_CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Capsule]
  spacex_capsulesUpcoming(find: spacex_CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Capsule]
  spacex_company: spacex_Info
  spacex_core(id: ID!): spacex_Core
  spacex_cores(find: spacex_CoresFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Core]
  spacex_coresPast(find: spacex_CoresFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Core]
  spacex_coresUpcoming(find: spacex_CoresFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Core]
  spacex_dragon(id: ID!): spacex_Dragon
  spacex_dragons(limit: Int, offset: Int): [spacex_Dragon]
  spacex_histories(find: spacex_HistoryFind, limit: Int, offset: Int, order: String, sort: String): [spacex_History]
  spacex_historiesResult(find: spacex_HistoryFind, limit: Int, offset: Int, order: String, sort: String): spacex_HistoriesResult
  spacex_history(id: ID!): spacex_History
  spacex_landpad(id: ID!): spacex_Landpad
  spacex_landpads(limit: Int, offset: Int): [spacex_Landpad]
  spacex_launch(id: ID!): spacex_Launch
  spacex_launchLatest(offset: Int): spacex_Launch
  spacex_launchNext(offset: Int): spacex_Launch
  spacex_launches(find: spacex_LaunchFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Launch]
  spacex_launchesPast(find: spacex_LaunchFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Launch]
  spacex_launchesPastResult(find: spacex_LaunchFind, limit: Int, offset: Int, order: String, sort: String): spacex_LaunchesPastResult
  spacex_launchesUpcoming(find: spacex_LaunchFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Launch]
  spacex_launchpad(id: ID!): spacex_Launchpad
  spacex_launchpads(limit: Int, offset: Int): [spacex_Launchpad]
  spacex_mission(id: ID!): spacex_Mission
  spacex_missions(find: spacex_MissionsFind, limit: Int, offset: Int): [spacex_Mission]
  spacex_missionsResult(find: spacex_MissionsFind, limit: Int, offset: Int): spacex_MissionResult
  spacex_payload(id: ID!): spacex_Payload
  spacex_payloads(find: spacex_PayloadsFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Payload]
  spacex_roadster: spacex_Roadster
  spacex_rocket(id: ID!): spacex_Rocket
  spacex_rockets(limit: Int, offset: Int): [spacex_Rocket]
  spacex_rocketsResult(limit: Int, offset: Int): spacex_RocketsResult
  spacex_ship(id: ID!): spacex_Ship
  spacex_ships(find: spacex_ShipsFind, limit: Int, offset: Int, order: String, sort: String): [spacex_Ship]
  spacex_shipsResult(find: spacex_ShipsFind, limit: Int, offset: Int, order: String, sort: String): spacex_ShipsResult
  backend_drug(id: ID): backend_DrugEntityResponse
  backend_drugs(filters: backend_DrugFiltersInput, pagination: backend_PaginationArg = {}, publicationState: backend_PublicationState = LIVE, sort: [String] = []): backend_DrugEntityResponseCollection
  backend_i18NLocale(id: ID): backend_I18NLocaleEntityResponse
  backend_i18NLocales(filters: backend_I18NLocaleFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_I18NLocaleEntityResponseCollection
  backend_me: backend_UsersPermissionsMe
  backend_patient(id: ID): backend_PatientEntityResponse
  backend_patients(filters: backend_PatientFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_PatientEntityResponseCollection
  backend_uploadFile(id: ID): backend_UploadFileEntityResponse
  backend_uploadFiles(filters: backend_UploadFileFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UploadFileEntityResponseCollection
  backend_uploadFolder(id: ID): backend_UploadFolderEntityResponse
  backend_uploadFolders(filters: backend_UploadFolderFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UploadFolderEntityResponseCollection
  backend_usersPermissionsRole(id: ID): backend_UsersPermissionsRoleEntityResponse
  backend_usersPermissionsRoles(filters: backend_UsersPermissionsRoleFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UsersPermissionsRoleEntityResponseCollection
  backend_usersPermissionsUser(id: ID): backend_UsersPermissionsUserEntityResponse
  backend_usersPermissionsUsers(filters: backend_UsersPermissionsUserFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UsersPermissionsUserEntityResponseCollection
}

type spacex_Result {
  totalCount: Int
  _join: Query!
}

type spacex_Roadster {
  apoapsis_au: Float
  details: String
  earth_distance_km: Float
  earth_distance_mi: Float
  eccentricity: Float
  epoch_jd: Float
  inclination: Float
  launch_date_unix: Date
  launch_date_utc: Date
  launch_mass_kg: Int
  launch_mass_lbs: Int
  longitude: Float
  mars_distance_km: Float
  mars_distance_mi: Float
  name: String
  norad_id: Int
  orbit_type: Float
  periapsis_arg: Float
  periapsis_au: Float
  period_days: Float
  semi_major_axis_au: Float
  speed_kph: Float
  speed_mph: Float
  wikipedia: String
  _join: Query!
}

type spacex_Rocket {
  active: Boolean
  boosters: Int
  company: String
  cost_per_launch: Int
  country: String
  description: String
  diameter: spacex_Distance
  engines: spacex_RocketEngines
  first_flight: Date
  first_stage: spacex_RocketFirstStage
  height: spacex_Distance
  id: ID
  landing_legs: spacex_RocketLandingLegs
  mass: spacex_Mass
  name: String
  payload_weights: [spacex_RocketPayloadWeight]
  second_stage: spacex_RocketSecondStage
  stages: Int
  success_rate_pct: Int
  type: String
  wikipedia: String
  _join: Query!
}

type spacex_RocketEngines {
  engine_loss_max: String
  layout: String
  number: Int
  propellant_1: String
  propellant_2: String
  thrust_sea_level: spacex_Force
  thrust_to_weight: Float
  thrust_vacuum: spacex_Force
  type: String
  version: String
  _join: Query!
}

type spacex_RocketFirstStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  reusable: Boolean
  thrust_sea_level: spacex_Force
  thrust_vacuum: spacex_Force
  _join: Query!
}

type spacex_RocketLandingLegs {
  material: String
  number: Int
  _join: Query!
}

type spacex_RocketPayloadWeight {
  id: String
  kg: Int
  lb: Int
  name: String
  _join: Query!
}

type spacex_RocketSecondStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  payloads: spacex_RocketSecondStagePayloads
  thrust: spacex_Force
  _join: Query!
}

type spacex_RocketSecondStagePayloadCompositeFairing {
  diameter: spacex_Distance
  height: spacex_Distance
  _join: Query!
}

type spacex_RocketSecondStagePayloads {
  composite_fairing: spacex_RocketSecondStagePayloadCompositeFairing
  option_1: String
  _join: Query!
}

type spacex_RocketsResult {
  data: [spacex_Rocket]
  result: spacex_Result
  _join: Query!
}

type spacex_Ship {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  image: String
  imo: Int
  missions: [spacex_ShipMission]
  mmsi: Int
  model: String
  name: String
  position: spacex_ShipLocation
  roles: [String]
  speed_kn: Float
  status: String
  successful_landings: Int
  type: String
  url: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
  _join: Query!
}

type spacex_ShipLocation {
  latitude: Float
  longitude: Float
  _join: Query!
}

type spacex_ShipMission {
  flight: String
  name: String
  _join: Query!
}

""""""
input spacex_ShipsFind {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  imo: Int
  latitude: Float
  longitude: Float
  mission: String
  mmsi: Int
  model: String
  name: String
  role: String
  speed_kn: Int
  status: String
  successful_landings: Int
  type: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
}

type spacex_ShipsResult {
  data: [spacex_Ship]
  result: spacex_Result
  _join: Query!
}

type spacex_Volume {
  cubic_feet: Int
  cubic_meters: Int
  _join: Query!
}

input backend_BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: backend_BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type backend_ComponentSymptomsSymptomsIcant {
  Sleep: Boolean
  id: ID!
  _join: Query!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input backend_DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: backend_DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type backend_Drug {
  createdAt: DateTime
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
  _join: Query!
}

type backend_DrugEntity {
  attributes: backend_Drug
  id: ID
  _join: Query!
}

type backend_DrugEntityResponse {
  data: backend_DrugEntity
  _join: Query!
}

type backend_DrugEntityResponseCollection {
  data: [backend_DrugEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_DrugFiltersInput {
  and: [backend_DrugFiltersInput]
  createdAt: backend_DateTimeFilterInput
  id: backend_IDFilterInput
  not: backend_DrugFiltersInput
  or: [backend_DrugFiltersInput]
  publishedAt: backend_DateTimeFilterInput
  title: backend_StringFilterInput
  updatedAt: backend_DateTimeFilterInput
}

input backend_DrugInput {
  publishedAt: DateTime
  title: String
}

input backend_FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input backend_FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: backend_FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union backend_GenericMorph = backend_ComponentSymptomsSymptomsIcant | backend_Drug | backend_I18NLocale | backend_Patient | backend_UploadFile | backend_UploadFolder | backend_UsersPermissionsPermission | backend_UsersPermissionsRole | backend_UsersPermissionsUser

type backend_I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
  _join: Query!
}

type backend_I18NLocaleEntity {
  attributes: backend_I18NLocale
  id: ID
  _join: Query!
}

type backend_I18NLocaleEntityResponse {
  data: backend_I18NLocaleEntity
  _join: Query!
}

type backend_I18NLocaleEntityResponseCollection {
  data: [backend_I18NLocaleEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_I18NLocaleFiltersInput {
  and: [backend_I18NLocaleFiltersInput]
  code: backend_StringFilterInput
  createdAt: backend_DateTimeFilterInput
  id: backend_IDFilterInput
  name: backend_StringFilterInput
  not: backend_I18NLocaleFiltersInput
  or: [backend_I18NLocaleFiltersInput]
  updatedAt: backend_DateTimeFilterInput
}

input backend_IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: backend_IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input backend_IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: backend_IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input backend_JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: backend_JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Mutation {
  """Change user password. Confirm with the current password."""
  backend_changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): backend_UsersPermissionsLoginPayload
  backend_createDrug(data: backend_DrugInput!): backend_DrugEntityResponse
  backend_createPatient(data: backend_PatientInput!): backend_PatientEntityResponse
  backend_createUploadFile(data: backend_UploadFileInput!): backend_UploadFileEntityResponse
  backend_createUploadFolder(data: backend_UploadFolderInput!): backend_UploadFolderEntityResponse
  """Create a new role"""
  backend_createUsersPermissionsRole(data: backend_UsersPermissionsRoleInput!): backend_UsersPermissionsCreateRolePayload
  """Create a new user"""
  backend_createUsersPermissionsUser(data: backend_UsersPermissionsUserInput!): backend_UsersPermissionsUserEntityResponse!
  backend_deleteDrug(id: ID!): backend_DrugEntityResponse
  backend_deletePatient(id: ID!): backend_PatientEntityResponse
  backend_deleteUploadFile(id: ID!): backend_UploadFileEntityResponse
  backend_deleteUploadFolder(id: ID!): backend_UploadFolderEntityResponse
  """Delete an existing role"""
  backend_deleteUsersPermissionsRole(id: ID!): backend_UsersPermissionsDeleteRolePayload
  """Delete an existing user"""
  backend_deleteUsersPermissionsUser(id: ID!): backend_UsersPermissionsUserEntityResponse!
  """Confirm an email users email address"""
  backend_emailConfirmation(confirmation: String!): backend_UsersPermissionsLoginPayload
  """Request a reset password token"""
  backend_forgotPassword(email: String!): backend_UsersPermissionsPasswordPayload
  backend_login(input: backend_UsersPermissionsLoginInput!): backend_UsersPermissionsLoginPayload!
  backend_multipleUpload(field: String, files: [backend_Upload]!, ref: String, refId: ID): [backend_UploadFileEntityResponse]!
  """Register a user"""
  backend_register(input: backend_UsersPermissionsRegisterInput!): backend_UsersPermissionsLoginPayload!
  backend_removeFile(id: ID!): backend_UploadFileEntityResponse
  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  backend_resetPassword(code: String!, password: String!, passwordConfirmation: String!): backend_UsersPermissionsLoginPayload
  backend_updateDrug(data: backend_DrugInput!, id: ID!): backend_DrugEntityResponse
  backend_updateFileInfo(id: ID!, info: backend_FileInfoInput): backend_UploadFileEntityResponse!
  backend_updatePatient(data: backend_PatientInput!, id: ID!): backend_PatientEntityResponse
  backend_updateUploadFile(data: backend_UploadFileInput!, id: ID!): backend_UploadFileEntityResponse
  backend_updateUploadFolder(data: backend_UploadFolderInput!, id: ID!): backend_UploadFolderEntityResponse
  """Update an existing role"""
  backend_updateUsersPermissionsRole(data: backend_UsersPermissionsRoleInput!, id: ID!): backend_UsersPermissionsUpdateRolePayload
  """Update an existing user"""
  backend_updateUsersPermissionsUser(data: backend_UsersPermissionsUserInput!, id: ID!): backend_UsersPermissionsUserEntityResponse!
  backend_upload(field: String, file: backend_Upload!, info: backend_FileInfoInput, ref: String, refId: ID): backend_UploadFileEntityResponse!
}

type backend_Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
  _join: Query!
}

input backend_PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type backend_Patient {
  PCP: String
  ageSegment: String
  country: String
  createdAt: DateTime
  creatorId: String
  diet: String
  ethnicity: String
  origin: String
  sleep: Boolean
  updatedAt: DateTime
  username: String
  weightSegment: String
  _join: Query!
}

type backend_PatientEntity {
  attributes: backend_Patient
  id: ID
  _join: Query!
}

type backend_PatientEntityResponse {
  data: backend_PatientEntity
  _join: Query!
}

type backend_PatientEntityResponseCollection {
  data: [backend_PatientEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_PatientFiltersInput {
  PCP: backend_StringFilterInput
  ageSegment: backend_StringFilterInput
  and: [backend_PatientFiltersInput]
  country: backend_StringFilterInput
  createdAt: backend_DateTimeFilterInput
  creatorId: backend_StringFilterInput
  diet: backend_StringFilterInput
  ethnicity: backend_StringFilterInput
  id: backend_IDFilterInput
  not: backend_PatientFiltersInput
  or: [backend_PatientFiltersInput]
  origin: backend_StringFilterInput
  sleep: backend_BooleanFilterInput
  updatedAt: backend_DateTimeFilterInput
  username: backend_StringFilterInput
  weightSegment: backend_StringFilterInput
}

input backend_PatientInput {
  PCP: String
  ageSegment: String
  country: String
  creatorId: String
  diet: String
  ethnicity: String
  origin: String
  sleep: Boolean
  username: String
  weightSegment: String
}

enum backend_PublicationState {
  LIVE
  PREVIEW
}

type backend_ResponseCollectionMeta {
  pagination: backend_Pagination!
  _join: Query!
}

input backend_StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: backend_StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar backend_Upload

type backend_UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [backend_GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
  _join: Query!
}

type backend_UploadFileEntity {
  attributes: backend_UploadFile
  id: ID
  _join: Query!
}

type backend_UploadFileEntityResponse {
  data: backend_UploadFileEntity
  _join: Query!
}

type backend_UploadFileEntityResponseCollection {
  data: [backend_UploadFileEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_UploadFileFiltersInput {
  alternativeText: backend_StringFilterInput
  and: [backend_UploadFileFiltersInput]
  caption: backend_StringFilterInput
  createdAt: backend_DateTimeFilterInput
  ext: backend_StringFilterInput
  folder: backend_UploadFolderFiltersInput
  folderPath: backend_StringFilterInput
  formats: backend_JSONFilterInput
  hash: backend_StringFilterInput
  height: backend_IntFilterInput
  id: backend_IDFilterInput
  mime: backend_StringFilterInput
  name: backend_StringFilterInput
  not: backend_UploadFileFiltersInput
  or: [backend_UploadFileFiltersInput]
  previewUrl: backend_StringFilterInput
  provider: backend_StringFilterInput
  provider_metadata: backend_JSONFilterInput
  size: backend_FloatFilterInput
  updatedAt: backend_DateTimeFilterInput
  url: backend_StringFilterInput
  width: backend_IntFilterInput
}

input backend_UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type backend_UploadFileRelationResponseCollection {
  data: [backend_UploadFileEntity!]!
  _join: Query!
}

type backend_UploadFolder {
  children(filters: backend_UploadFolderFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: backend_UploadFileFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UploadFileRelationResponseCollection
  name: String!
  parent: backend_UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
  _join: Query!
}

type backend_UploadFolderEntity {
  attributes: backend_UploadFolder
  id: ID
  _join: Query!
}

type backend_UploadFolderEntityResponse {
  data: backend_UploadFolderEntity
  _join: Query!
}

type backend_UploadFolderEntityResponseCollection {
  data: [backend_UploadFolderEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_UploadFolderFiltersInput {
  and: [backend_UploadFolderFiltersInput]
  children: backend_UploadFolderFiltersInput
  createdAt: backend_DateTimeFilterInput
  files: backend_UploadFileFiltersInput
  id: backend_IDFilterInput
  name: backend_StringFilterInput
  not: backend_UploadFolderFiltersInput
  or: [backend_UploadFolderFiltersInput]
  parent: backend_UploadFolderFiltersInput
  path: backend_StringFilterInput
  pathId: backend_IntFilterInput
  updatedAt: backend_DateTimeFilterInput
}

input backend_UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type backend_UploadFolderRelationResponseCollection {
  data: [backend_UploadFolderEntity!]!
  _join: Query!
}

type backend_UsersPermissionsCreateRolePayload {
  ok: Boolean!
  _join: Query!
}

type backend_UsersPermissionsDeleteRolePayload {
  ok: Boolean!
  _join: Query!
}

input backend_UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type backend_UsersPermissionsLoginPayload {
  jwt: String
  user: backend_UsersPermissionsMe!
  _join: Query!
}

type backend_UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: backend_UsersPermissionsMeRole
  username: String!
  _join: Query!
}

type backend_UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
  _join: Query!
}

type backend_UsersPermissionsPasswordPayload {
  ok: Boolean!
  _join: Query!
}

type backend_UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: backend_UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  _join: Query!
}

type backend_UsersPermissionsPermissionEntity {
  attributes: backend_UsersPermissionsPermission
  id: ID
  _join: Query!
}

input backend_UsersPermissionsPermissionFiltersInput {
  action: backend_StringFilterInput
  and: [backend_UsersPermissionsPermissionFiltersInput]
  createdAt: backend_DateTimeFilterInput
  id: backend_IDFilterInput
  not: backend_UsersPermissionsPermissionFiltersInput
  or: [backend_UsersPermissionsPermissionFiltersInput]
  role: backend_UsersPermissionsRoleFiltersInput
  updatedAt: backend_DateTimeFilterInput
}

type backend_UsersPermissionsPermissionRelationResponseCollection {
  data: [backend_UsersPermissionsPermissionEntity!]!
  _join: Query!
}

input backend_UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type backend_UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: backend_UsersPermissionsPermissionFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: backend_UsersPermissionsUserFiltersInput, pagination: backend_PaginationArg = {}, sort: [String] = []): backend_UsersPermissionsUserRelationResponseCollection
  _join: Query!
}

type backend_UsersPermissionsRoleEntity {
  attributes: backend_UsersPermissionsRole
  id: ID
  _join: Query!
}

type backend_UsersPermissionsRoleEntityResponse {
  data: backend_UsersPermissionsRoleEntity
  _join: Query!
}

type backend_UsersPermissionsRoleEntityResponseCollection {
  data: [backend_UsersPermissionsRoleEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_UsersPermissionsRoleFiltersInput {
  and: [backend_UsersPermissionsRoleFiltersInput]
  createdAt: backend_DateTimeFilterInput
  description: backend_StringFilterInput
  id: backend_IDFilterInput
  name: backend_StringFilterInput
  not: backend_UsersPermissionsRoleFiltersInput
  or: [backend_UsersPermissionsRoleFiltersInput]
  permissions: backend_UsersPermissionsPermissionFiltersInput
  type: backend_StringFilterInput
  updatedAt: backend_DateTimeFilterInput
  users: backend_UsersPermissionsUserFiltersInput
}

input backend_UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type backend_UsersPermissionsUpdateRolePayload {
  ok: Boolean!
  _join: Query!
}

type backend_UsersPermissionsUser {
  Level: Int
  avatar: Int
  blocked: Boolean
  company: String
  confirmed: Boolean
  contact: String
  country: String
  createdAt: DateTime
  email: String!
  plan: String
  provider: String
  role: backend_UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  userRole: String
  username: String!
  _join: Query!
}

type backend_UsersPermissionsUserEntity {
  attributes: backend_UsersPermissionsUser
  id: ID
  _join: Query!
}

type backend_UsersPermissionsUserEntityResponse {
  data: backend_UsersPermissionsUserEntity
  _join: Query!
}

type backend_UsersPermissionsUserEntityResponseCollection {
  data: [backend_UsersPermissionsUserEntity!]!
  meta: backend_ResponseCollectionMeta!
  _join: Query!
}

input backend_UsersPermissionsUserFiltersInput {
  Level: backend_IntFilterInput
  and: [backend_UsersPermissionsUserFiltersInput]
  avatar: backend_IntFilterInput
  blocked: backend_BooleanFilterInput
  company: backend_StringFilterInput
  confirmationToken: backend_StringFilterInput
  confirmed: backend_BooleanFilterInput
  contact: backend_StringFilterInput
  country: backend_StringFilterInput
  createdAt: backend_DateTimeFilterInput
  email: backend_StringFilterInput
  id: backend_IDFilterInput
  not: backend_UsersPermissionsUserFiltersInput
  or: [backend_UsersPermissionsUserFiltersInput]
  password: backend_StringFilterInput
  plan: backend_StringFilterInput
  provider: backend_StringFilterInput
  resetPasswordToken: backend_StringFilterInput
  role: backend_UsersPermissionsRoleFiltersInput
  updatedAt: backend_DateTimeFilterInput
  userRole: backend_StringFilterInput
  username: backend_StringFilterInput
}

input backend_UsersPermissionsUserInput {
  Level: Int
  avatar: Int
  blocked: Boolean
  company: String
  confirmationToken: String
  confirmed: Boolean
  contact: String
  country: String
  email: String
  password: String
  plan: String
  provider: String
  resetPasswordToken: String
  role: ID
  userRole: String
  username: String
}

type backend_UsersPermissionsUserRelationResponseCollection {
  data: [backend_UsersPermissionsUserEntity!]!
  _join: Query!
}

enum Claim {
  USERID
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}